---
import Layout from '../layouts/Layout.astro';
import Navbar from '@/components/Navbar.astro';
import Email from '@/components/examples/Email.astro';
import Tabs from '@/components/examples/Tabs.astro';

const themes = {
  'catppuccin-mocha': 'Catppuccin Mocha',
  'catppuccin-macchiato': 'Catppuccin Macchiato',
  'catppuccin-frappe': 'Catppuccin Frappe',
  'catppuccin-latte': 'Catppuccin Latte',
  dark: 'Dark',
  light: 'Light',
  'gruvbox-dark-hard': 'Gruvbox Dark Hard',
  'gruvbox-dark-medium': 'Gruvbox Dark Medium',
  'gruvbox-dark-soft': 'Gruvbox Dark Soft',
  'gruvbox-light-hard': 'Gruvbox Light Hard',
  'gruvbox-light-medium': 'Gruvbox Light Medium',
  'gruvbox-light-soft': 'Gruvbox Light Soft',
  nord: 'Nord',
};
---

<Layout>
  <!-- Stupid workaround because I can't figure out how to make popover contents appear above box- elements that appear after it -->
  <column style="flex-direction: column-reverse;">
    <div id="tab-contents">
      <div data-tab="email" class="active"><Email /></div>
      <div data-tab="auth">[Auth example coming soon]</div>
      <div data-tab="ecommerce">[Ecommerce example Coming Soon]</div>
      <div data-tab="ai">[AI Chat example Coming Soon]</div>
      <div data-tab="all">[All Components example Coming Soon]</div>
    </div>

    <column box-="square contain:!top">
      <row><span is-="badge" variant-="background0">Settings</span></row>
      <row class="wrap" gap-="1" space-="px:1" align-="center between">
        <Tabs id="tabslist">
          <button data-value="email" size-="small" variant-="background1">
            Email
          </button>
          <button data-value="auth" size-="small" variant-="background1">
            Auth
          </button>
          <button data-value="ecommerce" size-="small" variant-="background1">
            Ecommerce
          </button>
          <button data-value="ai" size-="small" variant-="background1">
            AI Chat
          </button>
          <button data-value="all" size-="small" variant-="background1">
            All Components
          </button>
        </Tabs>
        <row style="position: relative; z-index: 10; isolation: isolate;">
          <details
            is-="popover"
            position-="bottom baseline-right"
            id="theme-popover"
          >
            <summary tabindex="0" is-="button" size-="small"
              >Select Theme &#xf078;</summary
            >
            <column id="theme-options">
              {
                Object.entries(themes).map(([key, value]) => (
                  <button data-value={key} size-="small" variant-="background1">
                    {value}
                  </button>
                ))
              }
            </column>
          </details>
        </row>
      </row>
    </column>

    <Navbar />
  </column>
</Layout>

<style>
  #tabslist {
    [aria-selected="true"] {
      background-color: var(--background2);
    }

    button {
      white-space: nowrap;
    }
  }

  #tab-contents {
    [data-tab] {
      display: none;
      flex-grow: 1;

      &.active {
        display: flex;
      }
    }
  }

  .wrap {
    flex-wrap: wrap;
  }

  @layer base {
    html[data-webtui-theme="light"] {
      --background0: #fff;
      --background1: #ddd;
      --background2: #bbb;
      --background3: #999;

      --foreground0: #000;
      --foreground1: #444;
      --foreground2: #888;
    }

    html[data-webtui-theme="dark"] {
      --background0: #000;
      --background1: #222;
      --background2: #444;
      --background3: #666;

      --foreground0: #fff;
      --foreground1: #ccc;
      --foreground2: #999;
    }
  }

  #theme-options {
    background-color: var(--background0);

    button {
      white-space: nowrap;
      justify-content: flex-start;
    }
  }
</style>

<!-- Tab Switcher -->
<script>
  const tabslist = document.getElementById("tabslist")!;
  const tabContents = document.querySelectorAll("#tab-contents [data-tab]");

  const observer = new MutationObserver(() => {
    const value = tabslist.getAttribute("data-tab");

    tabContents.forEach((tab) => {
      if (tab.getAttribute("data-tab") === value) {
        tab.classList.add("active");
      } else {
        tab.classList.remove("active");
      }
    });
  });

  observer.observe(tabslist, {
    attributes: true,
    attributeFilter: ["data-tab"],
  });
</script>

<!-- Theme Switcher -->
<script>
  const themeOptions = document.querySelectorAll(
    "#theme-options button",
  ) as NodeListOf<HTMLButtonElement>;
  const themePopoverTrigger = document.querySelector(
    "#theme-popover summary",
  ) as HTMLElement;
  const html = document.querySelector("html")!;

  themeOptions.forEach((option) => {
    option.addEventListener("click", () => {
      themeOptions.forEach((opt) =>
        opt.setAttribute("variant-", "background1"),
      );
      option.setAttribute("variant-", "default");
      const value = option.getAttribute("data-value") as string;
      html.setAttribute("data-webtui-theme", value);
      themePopoverTrigger.click();
    });
  });
</script>
