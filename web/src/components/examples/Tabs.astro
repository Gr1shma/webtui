---
const { label, ...rest } = Astro.props;
---

<tabs-component label={label} role="tablist" {...rest}>
  <slot />
</tabs-component>

<template id="tabs-template">
  <style>
    #tabs-list {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
    }
  </style>
  <div id="tabs-list">
    <Fragment set:html={"<slot/>"} />
  </div>
</template>

<script>
  import { paginateElements } from "@/utils/vim";

  const template = document.getElementById(
    "tabs-template",
  ) as HTMLTemplateElement;

  class Tabs extends HTMLElement {
    constructor() {
      super();

      const shadow = this.attachShadow({ mode: "open" });
      shadow.appendChild(template.content.cloneNode(true));

      const self = this;
      const slot = shadow.querySelector("slot")!;

      slot.addEventListener("slotchange", () => {
        const items = slot
          .assignedElements({ flatten: false })
          .filter((node) => node instanceof HTMLButtonElement);

        if (items.length === 0)
          throw new Error("Tabs component requires at least one child element");
        if (!items.every((item) => item.hasAttribute("data-value"))) {
          throw new Error(
            "Each direct child of Tabs must have a `data-tab` attribute",
          );
        }

        if(!self.hasAttribute("data-tab"))
        self.setAttribute("data-tab", items[0].getAttribute("data-value")!);

        for (const item of items) {
          self.initializeTab(item);
        }
      });
    }

    initializeTab(item: HTMLElement) {
      const self = this;
      const shadow = self.shadowRoot!;
      const slot = shadow.querySelector("slot")!;

      const items = slot
        .assignedElements({ flatten: false })
        .filter((item) => item instanceof HTMLButtonElement);

      const value =
        self.getAttribute("data-tab") ?? items[0].getAttribute("data-value");

      const setCurrentTab = () => {
        items.forEach((item) => {
          item.setAttribute("aria-selected", "false");
        });

        self.setAttribute(
          "data-tab",
          item.getAttribute("data-value") as string,
        );
        item.setAttribute("aria-selected", "true");
      };

      item.setAttribute(
        "aria-selected",
        value === item.getAttribute("data-value") ? "true" : "false",
      );
      item.setAttribute("tabindex", "0");
      item.setAttribute("role", "tab");
      item.addEventListener("click", setCurrentTab);
      item.addEventListener("focus", setCurrentTab);

      item.addEventListener("keydown", (e) => {
        const { next, prev } = paginateElements(
          document.activeElement as HTMLElement,
          items,
        );

        if (e.key === "ArrowLeft" || e.key === "h") prev.focus();
        if (e.key === "ArrowRight" || e.key === "l") next.focus();
      });
    }
  }

  customElements.define("tabs-component", Tabs);
</script>
